name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress workflows when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test

jobs:
  # Job 1: Install dependencies and cache them
  setup:
    name: Setup & Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      bun-cache-hit: ${{ steps.bun-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "version=$(bun --version)" >> $GITHUB_OUTPUT

      - name: Cache Bun dependencies
        id: bun-cache
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-
            bun-${{ runner.os }}-

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

  # Job 2: Lint and Format Check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "version=$(bun --version)" >> $GITHUB_OUTPUT

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-
            node-modules-${{ runner.os }}-

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Run Biome lint
        run: bun run lint

      - name: Check Biome formatting
        run: bunx biome format . --check

  # Job 3: Type Checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "version=$(bun --version)" >> $GITHUB_OUTPUT

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-
            node-modules-${{ runner.os }}-

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Run TypeScript type check
        run: bunx tsc --noEmit

  # Job 4: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "version=$(bun --version)" >> $GITHUB_OUTPUT

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-
            node-modules-${{ runner.os }}-

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}-
            nextjs-${{ runner.os }}-

      - name: Build application
        run: bun run build
        env:
          NODE_ENV: production

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed: .next directory not found"
            exit 1
          fi
          echo "Build successful!"

      # Upload build artifacts for potential deployment
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next
            public
          retention-days: 7

  # Job 5: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "version=$(bun --version)" >> $GITHUB_OUTPUT

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ steps.bun-version.outputs.version }}-
            node-modules-${{ runner.os }}-

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit
        continue-on-error: true

  # Job 6: Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint status: ${{ needs.lint.result }}"
          echo "TypeCheck status: ${{ needs.typecheck.result }}"
          echo "Build status: ${{ needs.build.result }}"
          echo "Security status: ${{ needs.security.result }}"

          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.typecheck.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ CI failed - check the logs above"
            exit 1
          else
            echo "✅ All CI checks passed!"
          fi